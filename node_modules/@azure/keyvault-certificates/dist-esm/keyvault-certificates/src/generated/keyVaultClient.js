/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
import * as coreHttp from "@azure/core-http";
import * as Parameters from "./models/parameters";
import * as Mappers from "./models/mappers";
import { KeyVaultClientContext } from "./keyVaultClientContext";
/** @hidden */
export class KeyVaultClient extends KeyVaultClientContext {
    /**
     * Initializes a new instance of the KeyVaultClient class.
     * @param apiVersion Api Version
     * @param options The parameter options
     */
    constructor(apiVersion, options) {
        super(apiVersion, options);
    }
    /**
     * The GetCertificates operation returns the set of certificates resources in the specified key vault.
     * This operation requires the certificates/list permission.
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param options The options parameters.
     */
    getCertificates(vaultBaseUrl, options) {
        const operationArguments = {
            vaultBaseUrl,
            options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
        };
        return this.sendOperationRequest(operationArguments, getCertificatesOperationSpec);
    }
    /**
     * Deletes all versions of a certificate object along with its associated policy. Delete certificate
     * cannot be used to remove individual versions of a certificate object. This operation requires the
     * certificates/delete permission.
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param certificateName The name of the certificate.
     * @param options The options parameters.
     */
    deleteCertificate(vaultBaseUrl, certificateName, options) {
        const operationArguments = {
            vaultBaseUrl,
            certificateName,
            options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
        };
        return this.sendOperationRequest(operationArguments, deleteCertificateOperationSpec);
    }
    /**
     * Sets the certificate contacts for the specified key vault. This operation requires the
     * certificates/managecontacts permission.
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param contacts The contacts for the key vault certificate.
     * @param options The options parameters.
     */
    setCertificateContacts(vaultBaseUrl, contacts, options) {
        const operationArguments = {
            vaultBaseUrl,
            contacts,
            options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
        };
        return this.sendOperationRequest(operationArguments, setCertificateContactsOperationSpec);
    }
    /**
     * The GetCertificateContacts operation returns the set of certificate contact resources in the
     * specified key vault. This operation requires the certificates/managecontacts permission.
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param options The options parameters.
     */
    getCertificateContacts(vaultBaseUrl, options) {
        const operationArguments = {
            vaultBaseUrl,
            options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
        };
        return this.sendOperationRequest(operationArguments, getCertificateContactsOperationSpec);
    }
    /**
     * Deletes the certificate contacts for a specified key vault certificate. This operation requires the
     * certificates/managecontacts permission.
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param options The options parameters.
     */
    deleteCertificateContacts(vaultBaseUrl, options) {
        const operationArguments = {
            vaultBaseUrl,
            options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
        };
        return this.sendOperationRequest(operationArguments, deleteCertificateContactsOperationSpec);
    }
    /**
     * The GetCertificateIssuers operation returns the set of certificate issuer resources in the specified
     * key vault. This operation requires the certificates/manageissuers/getissuers permission.
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param options The options parameters.
     */
    getCertificateIssuers(vaultBaseUrl, options) {
        const operationArguments = {
            vaultBaseUrl,
            options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
        };
        return this.sendOperationRequest(operationArguments, getCertificateIssuersOperationSpec);
    }
    /**
     * The SetCertificateIssuer operation adds or updates the specified certificate issuer. This operation
     * requires the certificates/setissuers permission.
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param issuerName The name of the issuer.
     * @param provider The issuer provider.
     * @param options The options parameters.
     */
    setCertificateIssuer(vaultBaseUrl, issuerName, provider, options) {
        const operationArguments = {
            vaultBaseUrl,
            issuerName,
            provider,
            options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
        };
        return this.sendOperationRequest(operationArguments, setCertificateIssuerOperationSpec);
    }
    /**
     * The UpdateCertificateIssuer operation performs an update on the specified certificate issuer entity.
     * This operation requires the certificates/setissuers permission.
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param issuerName The name of the issuer.
     * @param options The options parameters.
     */
    updateCertificateIssuer(vaultBaseUrl, issuerName, options) {
        const operationArguments = {
            vaultBaseUrl,
            issuerName,
            options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
        };
        return this.sendOperationRequest(operationArguments, updateCertificateIssuerOperationSpec);
    }
    /**
     * The GetCertificateIssuer operation returns the specified certificate issuer resources in the
     * specified key vault. This operation requires the certificates/manageissuers/getissuers permission.
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param issuerName The name of the issuer.
     * @param options The options parameters.
     */
    getCertificateIssuer(vaultBaseUrl, issuerName, options) {
        const operationArguments = {
            vaultBaseUrl,
            issuerName,
            options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
        };
        return this.sendOperationRequest(operationArguments, getCertificateIssuerOperationSpec);
    }
    /**
     * The DeleteCertificateIssuer operation permanently removes the specified certificate issuer from the
     * vault. This operation requires the certificates/manageissuers/deleteissuers permission.
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param issuerName The name of the issuer.
     * @param options The options parameters.
     */
    deleteCertificateIssuer(vaultBaseUrl, issuerName, options) {
        const operationArguments = {
            vaultBaseUrl,
            issuerName,
            options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
        };
        return this.sendOperationRequest(operationArguments, deleteCertificateIssuerOperationSpec);
    }
    /**
     * If this is the first version, the certificate resource is created. This operation requires the
     * certificates/create permission.
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param certificateName The name of the certificate.
     * @param options The options parameters.
     */
    createCertificate(vaultBaseUrl, certificateName, options) {
        const operationArguments = {
            vaultBaseUrl,
            certificateName,
            options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
        };
        return this.sendOperationRequest(operationArguments, createCertificateOperationSpec);
    }
    /**
     * Imports an existing valid certificate, containing a private key, into Azure Key Vault. The
     * certificate to be imported can be in either PFX or PEM format. If the certificate is in PEM format
     * the PEM file must contain the key as well as x509 certificates. This operation requires the
     * certificates/import permission.
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param certificateName The name of the certificate.
     * @param base64EncodedCertificate Base64 encoded representation of the certificate object to import.
     *                                 This certificate needs to contain the private key.
     * @param options The options parameters.
     */
    importCertificate(vaultBaseUrl, certificateName, base64EncodedCertificate, options) {
        const operationArguments = {
            vaultBaseUrl,
            certificateName,
            base64EncodedCertificate,
            options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
        };
        return this.sendOperationRequest(operationArguments, importCertificateOperationSpec);
    }
    /**
     * The GetCertificateVersions operation returns the versions of a certificate in the specified key
     * vault. This operation requires the certificates/list permission.
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param certificateName The name of the certificate.
     * @param options The options parameters.
     */
    getCertificateVersions(vaultBaseUrl, certificateName, options) {
        const operationArguments = {
            vaultBaseUrl,
            certificateName,
            options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
        };
        return this.sendOperationRequest(operationArguments, getCertificateVersionsOperationSpec);
    }
    /**
     * The GetCertificatePolicy operation returns the specified certificate policy resources in the
     * specified key vault. This operation requires the certificates/get permission.
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param certificateName The name of the certificate in a given key vault.
     * @param options The options parameters.
     */
    getCertificatePolicy(vaultBaseUrl, certificateName, options) {
        const operationArguments = {
            vaultBaseUrl,
            certificateName,
            options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
        };
        return this.sendOperationRequest(operationArguments, getCertificatePolicyOperationSpec);
    }
    /**
     * Set specified members in the certificate policy. Leave others as null. This operation requires the
     * certificates/update permission.
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param certificateName The name of the certificate in the given vault.
     * @param certificatePolicy The policy for the certificate.
     * @param options The options parameters.
     */
    updateCertificatePolicy(vaultBaseUrl, certificateName, certificatePolicy, options) {
        const operationArguments = {
            vaultBaseUrl,
            certificateName,
            certificatePolicy,
            options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
        };
        return this.sendOperationRequest(operationArguments, updateCertificatePolicyOperationSpec);
    }
    /**
     * The UpdateCertificate operation applies the specified update on the given certificate; the only
     * elements updated are the certificate's attributes. This operation requires the certificates/update
     * permission.
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param certificateName The name of the certificate in the given key vault.
     * @param certificateVersion The version of the certificate.
     * @param options The options parameters.
     */
    updateCertificate(vaultBaseUrl, certificateName, certificateVersion, options) {
        const operationArguments = {
            vaultBaseUrl,
            certificateName,
            certificateVersion,
            options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
        };
        return this.sendOperationRequest(operationArguments, updateCertificateOperationSpec);
    }
    /**
     * Gets information about a specific certificate. This operation requires the certificates/get
     * permission.
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param certificateName The name of the certificate in the given vault.
     * @param certificateVersion The version of the certificate. This URI fragment is optional. If not
     *                           specified, the latest version of the certificate is returned.
     * @param options The options parameters.
     */
    getCertificate(vaultBaseUrl, certificateName, certificateVersion, options) {
        const operationArguments = {
            vaultBaseUrl,
            certificateName,
            certificateVersion,
            options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
        };
        return this.sendOperationRequest(operationArguments, getCertificateOperationSpec);
    }
    /**
     * Updates a certificate creation operation that is already in progress. This operation requires the
     * certificates/update permission.
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param certificateName The name of the certificate.
     * @param cancellationRequested Indicates if cancellation was requested on the certificate operation.
     * @param options The options parameters.
     */
    updateCertificateOperation(vaultBaseUrl, certificateName, cancellationRequested, options) {
        const operationArguments = {
            vaultBaseUrl,
            certificateName,
            cancellationRequested,
            options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
        };
        return this.sendOperationRequest(operationArguments, updateCertificateOperationOperationSpec);
    }
    /**
     * Gets the creation operation associated with a specified certificate. This operation requires the
     * certificates/get permission.
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param certificateName The name of the certificate.
     * @param options The options parameters.
     */
    getCertificateOperation(vaultBaseUrl, certificateName, options) {
        const operationArguments = {
            vaultBaseUrl,
            certificateName,
            options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
        };
        return this.sendOperationRequest(operationArguments, getCertificateOperationOperationSpec);
    }
    /**
     * Deletes the creation operation for a specified certificate that is in the process of being created.
     * The certificate is no longer created. This operation requires the certificates/update permission.
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param certificateName The name of the certificate.
     * @param options The options parameters.
     */
    deleteCertificateOperation(vaultBaseUrl, certificateName, options) {
        const operationArguments = {
            vaultBaseUrl,
            certificateName,
            options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
        };
        return this.sendOperationRequest(operationArguments, deleteCertificateOperationOperationSpec);
    }
    /**
     * The MergeCertificate operation performs the merging of a certificate or certificate chain with a key
     * pair currently available in the service. This operation requires the certificates/create permission.
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param certificateName The name of the certificate.
     * @param x509Certificates The certificate or the certificate chain to merge.
     * @param options The options parameters.
     */
    mergeCertificate(vaultBaseUrl, certificateName, x509Certificates, options) {
        const operationArguments = {
            vaultBaseUrl,
            certificateName,
            x509Certificates,
            options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
        };
        return this.sendOperationRequest(operationArguments, mergeCertificateOperationSpec);
    }
    /**
     * Requests that a backup of the specified certificate be downloaded to the client. All versions of the
     * certificate will be downloaded. This operation requires the certificates/backup permission.
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param certificateName The name of the certificate.
     * @param options The options parameters.
     */
    backupCertificate(vaultBaseUrl, certificateName, options) {
        const operationArguments = {
            vaultBaseUrl,
            certificateName,
            options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
        };
        return this.sendOperationRequest(operationArguments, backupCertificateOperationSpec);
    }
    /**
     * Restores a backed up certificate, and all its versions, to a vault. This operation requires the
     * certificates/restore permission.
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param certificateBundleBackup The backup blob associated with a certificate bundle.
     * @param options The options parameters.
     */
    restoreCertificate(vaultBaseUrl, certificateBundleBackup, options) {
        const operationArguments = {
            vaultBaseUrl,
            certificateBundleBackup,
            options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
        };
        return this.sendOperationRequest(operationArguments, restoreCertificateOperationSpec);
    }
    /**
     * The GetDeletedCertificates operation retrieves the certificates in the current vault which are in a
     * deleted state and ready for recovery or purging. This operation includes deletion-specific
     * information. This operation requires the certificates/get/list permission. This operation can only
     * be enabled on soft-delete enabled vaults.
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param options The options parameters.
     */
    getDeletedCertificates(vaultBaseUrl, options) {
        const operationArguments = {
            vaultBaseUrl,
            options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
        };
        return this.sendOperationRequest(operationArguments, getDeletedCertificatesOperationSpec);
    }
    /**
     * The GetDeletedCertificate operation retrieves the deleted certificate information plus its
     * attributes, such as retention interval, scheduled permanent deletion and the current deletion
     * recovery level. This operation requires the certificates/get permission.
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param certificateName The name of the certificate
     * @param options The options parameters.
     */
    getDeletedCertificate(vaultBaseUrl, certificateName, options) {
        const operationArguments = {
            vaultBaseUrl,
            certificateName,
            options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
        };
        return this.sendOperationRequest(operationArguments, getDeletedCertificateOperationSpec);
    }
    /**
     * The PurgeDeletedCertificate operation performs an irreversible deletion of the specified
     * certificate, without possibility for recovery. The operation is not available if the recovery level
     * does not specify 'Purgeable'. This operation requires the certificate/purge permission.
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param certificateName The name of the certificate
     * @param options The options parameters.
     */
    purgeDeletedCertificate(vaultBaseUrl, certificateName, options) {
        const operationArguments = {
            vaultBaseUrl,
            certificateName,
            options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
        };
        return this.sendOperationRequest(operationArguments, purgeDeletedCertificateOperationSpec);
    }
    /**
     * The RecoverDeletedCertificate operation performs the reversal of the Delete operation. The operation
     * is applicable in vaults enabled for soft-delete, and must be issued during the retention interval
     * (available in the deleted certificate's attributes). This operation requires the
     * certificates/recover permission.
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param certificateName The name of the deleted certificate
     * @param options The options parameters.
     */
    recoverDeletedCertificate(vaultBaseUrl, certificateName, options) {
        const operationArguments = {
            vaultBaseUrl,
            certificateName,
            options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
        };
        return this.sendOperationRequest(operationArguments, recoverDeletedCertificateOperationSpec);
    }
    /**
     * GetCertificatesNext
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param nextLink The nextLink from the previous successful call to the GetCertificates method.
     * @param options The options parameters.
     */
    getCertificatesNext(vaultBaseUrl, nextLink, options) {
        const operationArguments = {
            vaultBaseUrl,
            nextLink,
            options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
        };
        return this.sendOperationRequest(operationArguments, getCertificatesNextOperationSpec);
    }
    /**
     * GetCertificateIssuersNext
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param nextLink The nextLink from the previous successful call to the GetCertificateIssuers method.
     * @param options The options parameters.
     */
    getCertificateIssuersNext(vaultBaseUrl, nextLink, options) {
        const operationArguments = {
            vaultBaseUrl,
            nextLink,
            options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
        };
        return this.sendOperationRequest(operationArguments, getCertificateIssuersNextOperationSpec);
    }
    /**
     * GetCertificateVersionsNext
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param certificateName The name of the certificate.
     * @param nextLink The nextLink from the previous successful call to the GetCertificateVersions method.
     * @param options The options parameters.
     */
    getCertificateVersionsNext(vaultBaseUrl, certificateName, nextLink, options) {
        const operationArguments = {
            vaultBaseUrl,
            certificateName,
            nextLink,
            options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
        };
        return this.sendOperationRequest(operationArguments, getCertificateVersionsNextOperationSpec);
    }
    /**
     * GetDeletedCertificatesNext
     * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
     * @param nextLink The nextLink from the previous successful call to the GetDeletedCertificates method.
     * @param options The options parameters.
     */
    getDeletedCertificatesNext(vaultBaseUrl, nextLink, options) {
        const operationArguments = {
            vaultBaseUrl,
            nextLink,
            options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
        };
        return this.sendOperationRequest(operationArguments, getDeletedCertificatesNextOperationSpec);
    }
}
// Operation Specifications
const serializer = new coreHttp.Serializer(Mappers, /* isXml */ false);
const getCertificatesOperationSpec = {
    path: "/certificates",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.CertificateListResult
        },
        default: {
            bodyMapper: Mappers.KeyVaultError
        }
    },
    queryParameters: [
        Parameters.maxresults,
        Parameters.includePending,
        Parameters.apiVersion
    ],
    urlParameters: [Parameters.vaultBaseUrl],
    headerParameters: [Parameters.accept],
    serializer
};
const deleteCertificateOperationSpec = {
    path: "/certificates/{certificate-name}",
    httpMethod: "DELETE",
    responses: {
        200: {
            bodyMapper: Mappers.DeletedCertificateBundle
        },
        default: {
            bodyMapper: Mappers.KeyVaultError
        }
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [Parameters.vaultBaseUrl, Parameters.certificateName],
    headerParameters: [Parameters.accept],
    serializer
};
const setCertificateContactsOperationSpec = {
    path: "/certificates/contacts",
    httpMethod: "PUT",
    responses: {
        200: {
            bodyMapper: Mappers.Contacts
        },
        default: {
            bodyMapper: Mappers.KeyVaultError
        }
    },
    requestBody: Parameters.contacts,
    queryParameters: [Parameters.apiVersion],
    urlParameters: [Parameters.vaultBaseUrl],
    headerParameters: [Parameters.accept, Parameters.contentType],
    mediaType: "json",
    serializer
};
const getCertificateContactsOperationSpec = {
    path: "/certificates/contacts",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.Contacts
        },
        default: {
            bodyMapper: Mappers.KeyVaultError
        }
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [Parameters.vaultBaseUrl],
    headerParameters: [Parameters.accept],
    serializer
};
const deleteCertificateContactsOperationSpec = {
    path: "/certificates/contacts",
    httpMethod: "DELETE",
    responses: {
        200: {
            bodyMapper: Mappers.Contacts
        },
        default: {
            bodyMapper: Mappers.KeyVaultError
        }
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [Parameters.vaultBaseUrl],
    headerParameters: [Parameters.accept],
    serializer
};
const getCertificateIssuersOperationSpec = {
    path: "/certificates/issuers",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.CertificateIssuerListResult
        },
        default: {
            bodyMapper: Mappers.KeyVaultError
        }
    },
    queryParameters: [Parameters.maxresults, Parameters.apiVersion],
    urlParameters: [Parameters.vaultBaseUrl],
    headerParameters: [Parameters.accept],
    serializer
};
const setCertificateIssuerOperationSpec = {
    path: "/certificates/issuers/{issuer-name}",
    httpMethod: "PUT",
    responses: {
        200: {
            bodyMapper: Mappers.IssuerBundle
        },
        default: {
            bodyMapper: Mappers.KeyVaultError
        }
    },
    requestBody: {
        parameterPath: {
            provider: ["provider"],
            credentials: ["options", "credentials"],
            organizationDetails: ["options", "organizationDetails"],
            attributes: ["options", "attributes"]
        },
        mapper: Object.assign(Object.assign({}, Mappers.CertificateIssuerSetParameters), { required: true })
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [Parameters.vaultBaseUrl, Parameters.issuerName],
    headerParameters: [Parameters.accept, Parameters.contentType],
    mediaType: "json",
    serializer
};
const updateCertificateIssuerOperationSpec = {
    path: "/certificates/issuers/{issuer-name}",
    httpMethod: "PATCH",
    responses: {
        200: {
            bodyMapper: Mappers.IssuerBundle
        },
        default: {
            bodyMapper: Mappers.KeyVaultError
        }
    },
    requestBody: {
        parameterPath: {
            provider: ["options", "provider"],
            credentials: ["options", "credentials"],
            organizationDetails: ["options", "organizationDetails"],
            attributes: ["options", "attributes"]
        },
        mapper: Object.assign(Object.assign({}, Mappers.CertificateIssuerUpdateParameters), { required: true })
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [Parameters.vaultBaseUrl, Parameters.issuerName],
    headerParameters: [Parameters.accept, Parameters.contentType],
    mediaType: "json",
    serializer
};
const getCertificateIssuerOperationSpec = {
    path: "/certificates/issuers/{issuer-name}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.IssuerBundle
        },
        default: {
            bodyMapper: Mappers.KeyVaultError
        }
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [Parameters.vaultBaseUrl, Parameters.issuerName],
    headerParameters: [Parameters.accept],
    serializer
};
const deleteCertificateIssuerOperationSpec = {
    path: "/certificates/issuers/{issuer-name}",
    httpMethod: "DELETE",
    responses: {
        200: {
            bodyMapper: Mappers.IssuerBundle
        },
        default: {
            bodyMapper: Mappers.KeyVaultError
        }
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [Parameters.vaultBaseUrl, Parameters.issuerName],
    headerParameters: [Parameters.accept],
    serializer
};
const createCertificateOperationSpec = {
    path: "/certificates/{certificate-name}/create",
    httpMethod: "POST",
    responses: {
        202: {
            bodyMapper: Mappers.CertificateOperation
        },
        default: {
            bodyMapper: Mappers.KeyVaultError
        }
    },
    requestBody: {
        parameterPath: {
            certificatePolicy: ["options", "certificatePolicy"],
            certificateAttributes: ["options", "certificateAttributes"],
            tags: ["options", "tags"]
        },
        mapper: Object.assign(Object.assign({}, Mappers.CertificateCreateParameters), { required: true })
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [Parameters.vaultBaseUrl, Parameters.certificateName1],
    headerParameters: [Parameters.accept, Parameters.contentType],
    mediaType: "json",
    serializer
};
const importCertificateOperationSpec = {
    path: "/certificates/{certificate-name}/import",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: Mappers.CertificateBundle
        },
        default: {
            bodyMapper: Mappers.KeyVaultError
        }
    },
    requestBody: {
        parameterPath: {
            base64EncodedCertificate: ["base64EncodedCertificate"],
            password: ["options", "password"],
            certificatePolicy: ["options", "certificatePolicy"],
            certificateAttributes: ["options", "certificateAttributes"],
            tags: ["options", "tags"]
        },
        mapper: Object.assign(Object.assign({}, Mappers.CertificateImportParameters), { required: true })
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [Parameters.vaultBaseUrl, Parameters.certificateName1],
    headerParameters: [Parameters.accept, Parameters.contentType],
    mediaType: "json",
    serializer
};
const getCertificateVersionsOperationSpec = {
    path: "/certificates/{certificate-name}/versions",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.CertificateListResult
        },
        default: {
            bodyMapper: Mappers.KeyVaultError
        }
    },
    queryParameters: [Parameters.maxresults, Parameters.apiVersion],
    urlParameters: [Parameters.vaultBaseUrl, Parameters.certificateName],
    headerParameters: [Parameters.accept],
    serializer
};
const getCertificatePolicyOperationSpec = {
    path: "/certificates/{certificate-name}/policy",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.CertificatePolicy
        },
        default: {
            bodyMapper: Mappers.KeyVaultError
        }
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [Parameters.vaultBaseUrl, Parameters.certificateName],
    headerParameters: [Parameters.accept],
    serializer
};
const updateCertificatePolicyOperationSpec = {
    path: "/certificates/{certificate-name}/policy",
    httpMethod: "PATCH",
    responses: {
        200: {
            bodyMapper: Mappers.CertificatePolicy
        },
        default: {
            bodyMapper: Mappers.KeyVaultError
        }
    },
    requestBody: Parameters.certificatePolicy2,
    queryParameters: [Parameters.apiVersion],
    urlParameters: [Parameters.vaultBaseUrl, Parameters.certificateName],
    headerParameters: [Parameters.accept, Parameters.contentType],
    mediaType: "json",
    serializer
};
const updateCertificateOperationSpec = {
    path: "/certificates/{certificate-name}/{certificate-version}",
    httpMethod: "PATCH",
    responses: {
        200: {
            bodyMapper: Mappers.CertificateBundle
        },
        default: {
            bodyMapper: Mappers.KeyVaultError
        }
    },
    requestBody: {
        parameterPath: {
            certificatePolicy: ["options", "certificatePolicy"],
            certificateAttributes: ["options", "certificateAttributes"],
            tags: ["options", "tags"]
        },
        mapper: Object.assign(Object.assign({}, Mappers.CertificateUpdateParameters), { required: true })
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.vaultBaseUrl,
        Parameters.certificateName,
        Parameters.certificateVersion
    ],
    headerParameters: [Parameters.accept, Parameters.contentType],
    mediaType: "json",
    serializer
};
const getCertificateOperationSpec = {
    path: "/certificates/{certificate-name}/{certificate-version}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.CertificateBundle
        },
        default: {
            bodyMapper: Mappers.KeyVaultError
        }
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.vaultBaseUrl,
        Parameters.certificateName,
        Parameters.certificateVersion
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const updateCertificateOperationOperationSpec = {
    path: "/certificates/{certificate-name}/pending",
    httpMethod: "PATCH",
    responses: {
        200: {
            bodyMapper: Mappers.CertificateOperation
        },
        default: {
            bodyMapper: Mappers.KeyVaultError
        }
    },
    requestBody: {
        parameterPath: { cancellationRequested: ["cancellationRequested"] },
        mapper: Object.assign(Object.assign({}, Mappers.CertificateOperationUpdateParameter), { required: true })
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [Parameters.vaultBaseUrl, Parameters.certificateName],
    headerParameters: [Parameters.accept, Parameters.contentType],
    mediaType: "json",
    serializer
};
const getCertificateOperationOperationSpec = {
    path: "/certificates/{certificate-name}/pending",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.CertificateOperation
        },
        default: {
            bodyMapper: Mappers.KeyVaultError
        }
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [Parameters.vaultBaseUrl, Parameters.certificateName],
    headerParameters: [Parameters.accept],
    serializer
};
const deleteCertificateOperationOperationSpec = {
    path: "/certificates/{certificate-name}/pending",
    httpMethod: "DELETE",
    responses: {
        200: {
            bodyMapper: Mappers.CertificateOperation
        },
        default: {
            bodyMapper: Mappers.KeyVaultError
        }
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [Parameters.vaultBaseUrl, Parameters.certificateName],
    headerParameters: [Parameters.accept],
    serializer
};
const mergeCertificateOperationSpec = {
    path: "/certificates/{certificate-name}/pending/merge",
    httpMethod: "POST",
    responses: {
        201: {
            bodyMapper: Mappers.CertificateBundle
        },
        default: {
            bodyMapper: Mappers.KeyVaultError
        }
    },
    requestBody: {
        parameterPath: {
            x509Certificates: ["x509Certificates"],
            certificateAttributes: ["options", "certificateAttributes"],
            tags: ["options", "tags"]
        },
        mapper: Object.assign(Object.assign({}, Mappers.CertificateMergeParameters), { required: true })
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [Parameters.vaultBaseUrl, Parameters.certificateName],
    headerParameters: [Parameters.accept, Parameters.contentType],
    mediaType: "json",
    serializer
};
const backupCertificateOperationSpec = {
    path: "/certificates/{certificate-name}/backup",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: Mappers.BackupCertificateResult
        },
        default: {
            bodyMapper: Mappers.KeyVaultError
        }
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [Parameters.vaultBaseUrl, Parameters.certificateName],
    headerParameters: [Parameters.accept],
    serializer
};
const restoreCertificateOperationSpec = {
    path: "/certificates/restore",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: Mappers.CertificateBundle
        },
        default: {
            bodyMapper: Mappers.KeyVaultError
        }
    },
    requestBody: {
        parameterPath: { certificateBundleBackup: ["certificateBundleBackup"] },
        mapper: Object.assign(Object.assign({}, Mappers.CertificateRestoreParameters), { required: true })
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [Parameters.vaultBaseUrl],
    headerParameters: [Parameters.accept, Parameters.contentType],
    mediaType: "json",
    serializer
};
const getDeletedCertificatesOperationSpec = {
    path: "/deletedcertificates",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.DeletedCertificateListResult
        },
        default: {
            bodyMapper: Mappers.KeyVaultError
        }
    },
    queryParameters: [
        Parameters.maxresults,
        Parameters.includePending,
        Parameters.apiVersion
    ],
    urlParameters: [Parameters.vaultBaseUrl],
    headerParameters: [Parameters.accept],
    serializer
};
const getDeletedCertificateOperationSpec = {
    path: "/deletedcertificates/{certificate-name}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.DeletedCertificateBundle
        },
        default: {
            bodyMapper: Mappers.KeyVaultError
        }
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [Parameters.vaultBaseUrl, Parameters.certificateName],
    headerParameters: [Parameters.accept],
    serializer
};
const purgeDeletedCertificateOperationSpec = {
    path: "/deletedcertificates/{certificate-name}",
    httpMethod: "DELETE",
    responses: {
        204: {},
        default: {
            bodyMapper: Mappers.KeyVaultError
        }
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [Parameters.vaultBaseUrl, Parameters.certificateName],
    headerParameters: [Parameters.accept],
    serializer
};
const recoverDeletedCertificateOperationSpec = {
    path: "/deletedcertificates/{certificate-name}/recover",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: Mappers.CertificateBundle
        },
        default: {
            bodyMapper: Mappers.KeyVaultError
        }
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [Parameters.vaultBaseUrl, Parameters.certificateName],
    headerParameters: [Parameters.accept],
    serializer
};
const getCertificatesNextOperationSpec = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.CertificateListResult
        },
        default: {
            bodyMapper: Mappers.KeyVaultError
        }
    },
    queryParameters: [
        Parameters.maxresults,
        Parameters.includePending,
        Parameters.apiVersion
    ],
    urlParameters: [Parameters.vaultBaseUrl, Parameters.nextLink],
    headerParameters: [Parameters.accept],
    serializer
};
const getCertificateIssuersNextOperationSpec = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.CertificateIssuerListResult
        },
        default: {
            bodyMapper: Mappers.KeyVaultError
        }
    },
    queryParameters: [Parameters.maxresults, Parameters.apiVersion],
    urlParameters: [Parameters.vaultBaseUrl, Parameters.nextLink],
    headerParameters: [Parameters.accept],
    serializer
};
const getCertificateVersionsNextOperationSpec = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.CertificateListResult
        },
        default: {
            bodyMapper: Mappers.KeyVaultError
        }
    },
    queryParameters: [Parameters.maxresults, Parameters.apiVersion],
    urlParameters: [
        Parameters.vaultBaseUrl,
        Parameters.certificateName,
        Parameters.nextLink
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const getDeletedCertificatesNextOperationSpec = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.DeletedCertificateListResult
        },
        default: {
            bodyMapper: Mappers.KeyVaultError
        }
    },
    queryParameters: [
        Parameters.maxresults,
        Parameters.includePending,
        Parameters.apiVersion
    ],
    urlParameters: [Parameters.vaultBaseUrl, Parameters.nextLink],
    headerParameters: [Parameters.accept],
    serializer
};
//# sourceMappingURL=keyVaultClient.js.map