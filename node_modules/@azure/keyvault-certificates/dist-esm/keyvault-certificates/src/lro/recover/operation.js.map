{"version":3,"file":"operation.js","sourceRoot":"","sources":["../../../../../src/lro/recover/operation.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { AbortSignalLike } from \"@azure/abort-controller\";\nimport { OperationOptions } from \"@azure/core-http\";\nimport { createTraceFunction } from \"../../../../keyvault-common/src\";\nimport {\n  GetCertificateOptions,\n  KeyVaultCertificateWithPolicy,\n  RecoverDeletedCertificateOptions\n} from \"../../certificatesModels\";\nimport { KeyVaultClient } from \"../../generated/keyVaultClient\";\nimport { getCertificateWithPolicyFromCertificateBundle } from \"../../transformations\";\nimport {\n  KeyVaultCertificatePollOperation,\n  KeyVaultCertificatePollOperationState\n} from \"../keyVaultCertificatePoller\";\n\n/**\n * @internal\n */\nconst withTrace = createTraceFunction(\n  \"Azure.KeyVault.Certificates.RecoverDeletedCertificatePoller\"\n);\n\n/**\n * Deprecated: Public representation of the recovery of a deleted certificate poll operation\n */\nexport type RecoverDeletedCertificateState = KeyVaultCertificatePollOperationState<\n  KeyVaultCertificateWithPolicy\n>;\n\n/**\n * An interface representing the recovery of a deleted certificate's poll operation\n */\nexport class RecoverDeletedCertificatePollOperation extends KeyVaultCertificatePollOperation<\n  RecoverDeletedCertificateState,\n  KeyVaultCertificateWithPolicy\n> {\n  constructor(\n    public state: RecoverDeletedCertificateState,\n    private vaultUrl: string,\n    private client: KeyVaultClient,\n    private operationOptions: OperationOptions = {}\n  ) {\n    super(state, {\n      cancelMessage: \"Canceling the recovery of a deleted certificate is not supported.\"\n    });\n  }\n\n  /**\n   * Gets the latest information available from a specific certificate, including the certificate's policy. This operation requires the certificates/get permission.\n   */\n  private getCertificate(\n    certificateName: string,\n    options: GetCertificateOptions = {}\n  ): Promise<KeyVaultCertificateWithPolicy> {\n    return withTrace(\"getCertificate\", options, async (updatedOptions) => {\n      const result = await this.client.getCertificate(\n        this.vaultUrl,\n        certificateName,\n        \"\",\n        updatedOptions\n      );\n      return getCertificateWithPolicyFromCertificateBundle(result);\n    });\n  }\n\n  /**\n   * Recovers the deleted certificate in the specified vault. This operation can only be performed on a soft-delete enabled vault. This operation\n   * requires the certificate/recover permission.\n   */\n  private recoverDeletedCertificate(\n    certificateName: string,\n    options: RecoverDeletedCertificateOptions = {}\n  ): Promise<KeyVaultCertificateWithPolicy> {\n    return withTrace(\"recoverDeletedCertificate\", options, async (updatedOptions) => {\n      const result = await this.client.recoverDeletedCertificate(\n        this.vaultUrl,\n        certificateName,\n        updatedOptions\n      );\n      return getCertificateWithPolicyFromCertificateBundle(result._response.parsedBody);\n    });\n  }\n\n  /**\n   * Reaches to the service and updates the poll operation.\n   */\n  async update(\n    options: {\n      abortSignal?: AbortSignalLike;\n      fireProgress?: (state: RecoverDeletedCertificateState) => void;\n    } = {}\n  ): Promise<RecoverDeletedCertificatePollOperation> {\n    const state = this.state;\n    const { certificateName } = state;\n\n    if (options.abortSignal) {\n      this.operationOptions.abortSignal = options.abortSignal;\n    }\n\n    if (!state.isStarted) {\n      try {\n        state.result = await this.getCertificate(certificateName, this.operationOptions);\n        state.isCompleted = true;\n      } catch (e) {\n        // getCertificate will only work once the LRO is completed.\n      }\n      if (!state.isCompleted) {\n        state.result = await this.recoverDeletedCertificate(certificateName, this.operationOptions);\n        state.isStarted = true;\n      }\n    }\n\n    if (!state.isCompleted) {\n      try {\n        state.result = await this.getCertificate(certificateName, this.operationOptions);\n        state.isCompleted = true;\n      } catch (error) {\n        if (error.statusCode === 403) {\n          // At this point, the resource exists but the user doesn't have access to it.\n          state.isCompleted = true;\n        } else if (error.statusCode !== 404) {\n          state.error = error;\n          state.isCompleted = true;\n          throw error;\n        }\n      }\n    }\n\n    return this;\n  }\n}\n"]}