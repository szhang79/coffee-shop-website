{"version":3,"file":"operation.js","sourceRoot":"","sources":["../../../../../src/lro/create/operation.ts"],"names":[],"mappings":"AAAA,uCAAuC;AACvC,kCAAkC;AAalC,OAAO,EACL,gCAAgC,EAEjC,MAAM,8BAA8B,CAAC;AAEtC,OAAO,EACL,wCAAwC,EACxC,6CAA6C,EAC7C,gBAAgB,EAChB,YAAY,EACb,MAAM,uBAAuB,CAAC;AAC/B,OAAO,EAAE,mBAAmB,EAAE,MAAM,iCAAiC,CAAC;AAEtE;;GAEG;AACH,MAAM,SAAS,GAAG,mBAAmB,CAAC,qDAAqD,CAAC,CAAC;AA4B7F;;GAEG;AACH,MAAM,OAAO,8BAA+B,SAAQ,gCAGnD;IACC,YACS,KAA0C,EACzC,QAAgB,EAChB,MAAsB,EACtB,mBAAqC,EAAE;QAE/C,KAAK,CAAC,KAAK,CAAC,CAAC;QALN,UAAK,GAAL,KAAK,CAAqC;QACzC,aAAQ,GAAR,QAAQ,CAAQ;QAChB,WAAM,GAAN,MAAM,CAAgB;QACtB,qBAAgB,GAAhB,gBAAgB,CAAuB;IAGjD,CAAC;IAED;;OAEG;IACK,iBAAiB,CACvB,eAAuB,EACvB,iBAAoC,EACpC,UAAoC,EAAE;QAEtC,OAAO,SAAS,CAAC,mBAAmB,EAAE,OAAO,EAAE,KAAK,EAAE,cAAc,EAAE,EAAE;YACtE,MAAM,EAAE,GAAG,OAAO,CAAC,EAAE,CAAC;YACtB,MAAM,qBAAqB,GAAG,gBAAgB,CAAC,OAAO,CAAC,CAAC;YACxD,MAAM,UAAU,GAAG,YAAY,CAAC,EAAE,EAAE,iBAAiB,EAAE,qBAAqB,CAAC,CAAC;YAC9E,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,MAAM,CAAC,iBAAiB,CAAC,IAAI,CAAC,QAAQ,EAAE,eAAe,kCAC5E,cAAc,KACjB,iBAAiB,EAAE,UAAU,EAC7B,qBAAqB,IACrB,CAAC;YAEH,OAAO,6CAA6C,CAAC,MAAM,CAAC,CAAC;QAC/D,CAAC,CAAC,CAAC;IACL,CAAC;IAED;;OAEG;IACK,cAAc,CACpB,eAAuB,EACvB,UAAiC,EAAE;QAEnC,OAAO,SAAS,CAAC,gBAAgB,EAAE,OAAO,EAAE,KAAK,EAAE,cAAc,EAAE,EAAE;YACnE,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,MAAM,CAAC,cAAc,CAC7C,IAAI,CAAC,QAAQ,EACb,eAAe,EACf,EAAE,EACF,cAAc,CACf,CAAC;YAEF,OAAO,6CAA6C,CAAC,MAAM,CAAC,CAAC;QAC/D,CAAC,CAAC,CAAC;IACL,CAAC;IAED;;OAEG;IACK,4BAA4B,CAClC,eAAuB,EACvB,UAA+C,EAAE;QAEjD,OAAO,SAAS,CAAC,8BAA8B,EAAE,OAAO,EAAE,KAAK,EAAE,cAAc,EAAE,EAAE;YACjF,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,MAAM,CAAC,uBAAuB,CACtD,IAAI,CAAC,QAAQ,EACb,eAAe,EACf,cAAc,CACf,CAAC;YACF,OAAO,wCAAwC,CAC7C,eAAe,EACf,IAAI,CAAC,QAAQ,EACb,MAAM,CAAC,SAAS,CAAC,UAAU,CAC5B,CAAC;QACJ,CAAC,CAAC,CAAC;IACL,CAAC;IAED;;OAEG;IACK,0BAA0B,CAChC,eAAuB,EACvB,UAA6C,EAAE;QAE/C,OAAO,SAAS,CAAC,4BAA4B,EAAE,OAAO,EAAE,KAAK,EAAE,cAAc,EAAE,EAAE;YAC/E,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,MAAM,CAAC,0BAA0B,CACzD,IAAI,CAAC,QAAQ,EACb,eAAe,EACf,IAAI,EACJ,cAAc,CACf,CAAC;YACF,OAAO,wCAAwC,CAC7C,eAAe,EACf,IAAI,CAAC,QAAQ,EACb,MAAM,CAAC,SAAS,CAAC,UAAU,CAC5B,CAAC;QACJ,CAAC,CAAC,CAAC;IACL,CAAC;IAED;;OAEG;IACH,KAAK,CAAC,MAAM,CAEV,UAGI,EAAE;QAEN,MAAM,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC;QACzB,MAAM,EAAE,eAAe,EAAE,iBAAiB,EAAE,wBAAwB,EAAE,GAAG,KAAK,CAAC;QAE/E,IAAI,OAAO,CAAC,WAAW,EAAE;YACvB,IAAI,CAAC,gBAAgB,CAAC,WAAW,GAAG,OAAO,CAAC,WAAW,CAAC;YACxD,wBAAwB,CAAC,WAAW,GAAG,OAAO,CAAC,WAAW,CAAC;SAC5D;QAED,IAAI,CAAC,KAAK,CAAC,SAAS,EAAE;YACpB,KAAK,CAAC,SAAS,GAAG,IAAI,CAAC;YACvB,KAAK,CAAC,MAAM,GAAG,MAAM,IAAI,CAAC,iBAAiB,CACzC,eAAe,EACf,iBAAkB,EAClB,wBAAwB,CACzB,CAAC;YACF,IAAI,CAAC,KAAK,CAAC,oBAAoB,GAAG,MAAM,IAAI,CAAC,4BAA4B,CACvE,eAAe,EACf,IAAI,CAAC,gBAAgB,CACtB,CAAC;SACH;aAAM,IAAI,CAAC,KAAK,CAAC,WAAW,EAAE;YAC7B,IAAI,CAAC,KAAK,CAAC,oBAAoB,GAAG,MAAM,IAAI,CAAC,4BAA4B,CACvE,eAAe,EACf,IAAI,CAAC,gBAAgB,CACtB,CAAC;SACH;QAED,IAAI,KAAK,CAAC,oBAAoB,IAAI,KAAK,CAAC,oBAAoB,CAAC,MAAM,KAAK,YAAY,EAAE;YACpF,KAAK,CAAC,WAAW,GAAG,IAAI,CAAC;YACzB,KAAK,CAAC,MAAM,GAAG,MAAM,IAAI,CAAC,cAAc,CAAC,eAAe,EAAE,IAAI,CAAC,gBAAgB,CAAC,CAAC;YACjF,IAAI,KAAK,CAAC,oBAAoB,CAAC,KAAK,EAAE;gBACpC,KAAK,CAAC,KAAK,GAAG,IAAI,KAAK,CAAC,KAAK,CAAC,oBAAoB,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;aACnE;SACF;QAED,OAAO,IAAI,CAAC;IACd,CAAC;IAED;;OAEG;IACH,KAAK,CAAC,MAAM,CAEV,UAAyC,EAAE;QAE3C,MAAM,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC;QACzB,MAAM,EAAE,eAAe,EAAE,GAAG,KAAK,CAAC;QAElC,IAAI,OAAO,CAAC,WAAW,EAAE;YACvB,IAAI,CAAC,gBAAgB,CAAC,WAAW,GAAG,OAAO,CAAC,WAAW,CAAC;SACzD;QAED,KAAK,CAAC,oBAAoB,GAAG,MAAM,IAAI,CAAC,0BAA0B,CAChE,eAAe,EACf,IAAI,CAAC,gBAAgB,CACtB,CAAC;QAEF,IAAI,CAAC,KAAK,CAAC,WAAW,GAAG,IAAI,CAAC;QAC9B,OAAO,IAAI,CAAC;IACd,CAAC;CACF","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { AbortSignalLike, AbortSignal } from \"@azure/abort-controller\";\nimport { OperationOptions } from \"@azure/core-http\";\nimport {\n  KeyVaultCertificateWithPolicy,\n  CreateCertificateOptions,\n  CertificatePolicy,\n  GetCertificateOptions,\n  GetPlainCertificateOperationOptions,\n  CancelCertificateOperationOptions\n} from \"../../certificatesModels\";\nimport { CertificateOperation } from \"../../generated/models\";\nimport {\n  KeyVaultCertificatePollOperation,\n  KeyVaultCertificatePollOperationState\n} from \"../keyVaultCertificatePoller\";\nimport { KeyVaultClient } from \"../../generated/keyVaultClient\";\nimport {\n  getCertificateOperationFromCoreOperation,\n  getCertificateWithPolicyFromCertificateBundle,\n  toCoreAttributes,\n  toCorePolicy\n} from \"../../transformations\";\nimport { createTraceFunction } from \"../../../../keyvault-common/src\";\n\n/**\n * @internal\n */\nconst withTrace = createTraceFunction(\"Azure.KeyVault.Certificates.CreateCertificatePoller\");\n\n/**\n * The public representation of the CreateCertificatePoller operation state.\n */\nexport type CreateCertificateState = KeyVaultCertificatePollOperationState<\n  KeyVaultCertificateWithPolicy\n>;\n\n/**\n * An interface representing the state of a create certificate's poll operation\n */\nexport interface CreateCertificatePollOperationState\n  extends KeyVaultCertificatePollOperationState<KeyVaultCertificateWithPolicy> {\n  /**\n   * The policy of the certificate.\n   */\n  certificatePolicy?: CertificatePolicy;\n  /**\n   * Optional parameters sent to createCertificates\n   */\n  createCertificateOptions: CreateCertificateOptions;\n  /**\n   * The operation of the certificate\n   */\n  certificateOperation?: CertificateOperation;\n}\n\n/**\n * An interface representing a create certificate's poll operation\n */\nexport class CreateCertificatePollOperation extends KeyVaultCertificatePollOperation<\n  CreateCertificatePollOperationState,\n  KeyVaultCertificateWithPolicy\n> {\n  constructor(\n    public state: CreateCertificatePollOperationState,\n    private vaultUrl: string,\n    private client: KeyVaultClient,\n    private operationOptions: OperationOptions = {}\n  ) {\n    super(state);\n  }\n\n  /**\n   * Creates a new certificate. If this is the first version, the certificate resource is created. This operation requires the certificates/create permission.\n   */\n  private createCertificate(\n    certificateName: string,\n    certificatePolicy: CertificatePolicy,\n    options: CreateCertificateOptions = {}\n  ): Promise<KeyVaultCertificateWithPolicy> {\n    return withTrace(\"createCertificate\", options, async (updatedOptions) => {\n      const id = options.id;\n      const certificateAttributes = toCoreAttributes(options);\n      const corePolicy = toCorePolicy(id, certificatePolicy, certificateAttributes);\n      const result = await this.client.createCertificate(this.vaultUrl, certificateName, {\n        ...updatedOptions,\n        certificatePolicy: corePolicy,\n        certificateAttributes\n      });\n\n      return getCertificateWithPolicyFromCertificateBundle(result);\n    });\n  }\n\n  /**\n   * Gets the latest information available from a specific certificate, including the certificate's policy. This operation requires the certificates/get permission.\n   */\n  private getCertificate(\n    certificateName: string,\n    options: GetCertificateOptions = {}\n  ): Promise<KeyVaultCertificateWithPolicy> {\n    return withTrace(\"getCertificate\", options, async (updatedOptions) => {\n      const result = await this.client.getCertificate(\n        this.vaultUrl,\n        certificateName,\n        \"\",\n        updatedOptions\n      );\n\n      return getCertificateWithPolicyFromCertificateBundle(result);\n    });\n  }\n\n  /**\n   * Gets the certificate operation.\n   */\n  private getPlainCertificateOperation(\n    certificateName: string,\n    options: GetPlainCertificateOperationOptions = {}\n  ): Promise<CertificateOperation> {\n    return withTrace(\"getPlainCertificateOperation\", options, async (updatedOptions) => {\n      const result = await this.client.getCertificateOperation(\n        this.vaultUrl,\n        certificateName,\n        updatedOptions\n      );\n      return getCertificateOperationFromCoreOperation(\n        certificateName,\n        this.vaultUrl,\n        result._response.parsedBody\n      );\n    });\n  }\n\n  /**\n   * Cancels a certificate creation operation that is already in progress. This operation requires the certificates/update permission.\n   */\n  private cancelCertificateOperation(\n    certificateName: string,\n    options: CancelCertificateOperationOptions = {}\n  ): Promise<CertificateOperation> {\n    return withTrace(\"cancelCertificateOperation\", options, async (updatedOptions) => {\n      const result = await this.client.updateCertificateOperation(\n        this.vaultUrl,\n        certificateName,\n        true,\n        updatedOptions\n      );\n      return getCertificateOperationFromCoreOperation(\n        certificateName,\n        this.vaultUrl,\n        result._response.parsedBody\n      );\n    });\n  }\n\n  /**\n   * Reaches to the service and updates the create certificate's poll operation.\n   */\n  async update(\n    this: CreateCertificatePollOperation,\n    options: {\n      abortSignal?: AbortSignalLike;\n      fireProgress?: (state: CreateCertificatePollOperationState) => void;\n    } = {}\n  ): Promise<CreateCertificatePollOperation> {\n    const state = this.state;\n    const { certificateName, certificatePolicy, createCertificateOptions } = state;\n\n    if (options.abortSignal) {\n      this.operationOptions.abortSignal = options.abortSignal;\n      createCertificateOptions.abortSignal = options.abortSignal;\n    }\n\n    if (!state.isStarted) {\n      state.isStarted = true;\n      state.result = await this.createCertificate(\n        certificateName,\n        certificatePolicy!,\n        createCertificateOptions\n      );\n      this.state.certificateOperation = await this.getPlainCertificateOperation(\n        certificateName,\n        this.operationOptions\n      );\n    } else if (!state.isCompleted) {\n      this.state.certificateOperation = await this.getPlainCertificateOperation(\n        certificateName,\n        this.operationOptions\n      );\n    }\n\n    if (state.certificateOperation && state.certificateOperation.status !== \"inProgress\") {\n      state.isCompleted = true;\n      state.result = await this.getCertificate(certificateName, this.operationOptions);\n      if (state.certificateOperation.error) {\n        state.error = new Error(state.certificateOperation.error.message);\n      }\n    }\n\n    return this;\n  }\n\n  /**\n   * Reaches to the service and cancels the certificate's operation, also updating the certificate's poll operation\n   */\n  async cancel(\n    this: CreateCertificatePollOperation,\n    options: { abortSignal?: AbortSignal } = {}\n  ): Promise<CreateCertificatePollOperation> {\n    const state = this.state;\n    const { certificateName } = state;\n\n    if (options.abortSignal) {\n      this.operationOptions.abortSignal = options.abortSignal;\n    }\n\n    state.certificateOperation = await this.cancelCertificateOperation(\n      certificateName,\n      this.operationOptions\n    );\n\n    this.state.isCancelled = true;\n    return this;\n  }\n}\n"]}